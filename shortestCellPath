import java.io.*;
import java.util.*;

public class Solution {

	public static int shortestCellPath(int[][] grid, int sr, int sc, int tr, int tc) {
		// your code goes here
    
       
      Queue<List<Integer>> q  = new LinkedList<List<Integer>>();
      boolean[][] marked = new boolean[grid.length][ grid[0].length];
      List<List<Integer>> adjList = new ArrayList<List<Integer>>();
      marked[sr][sc] = true;
      q.add(new ArrayList(Arrays.asList(sr,sc,0)));
      int R = grid.length;
      int C = grid[0].length;
    //  System.out.println("Row length" + R + "cols" + C);
                           
       while( !q.isEmpty()){
           List<Integer> curr = q.remove();
           int nr = curr.get(0);
           int nc = curr.get(1);
           int depth = curr.get(2);
          // System.out.println( nr + " " + nc + " " + depth);
           if(nr == tr && nc == tc){
               return depth;
           }
           
           adjList.add(new ArrayList(Arrays.asList( nr +1, nc)));
           adjList.add(new ArrayList(Arrays.asList( nr -1, nc)));
           adjList.add(new ArrayList(Arrays.asList( nr, nc + 1)));
           adjList.add(new ArrayList(Arrays.asList( nr, nc -1 )));
         
           
           for(List<Integer> i : adjList){
                int r = i.get(0);
                int c = i.get(1);
               // System.out.println("adj vertex lies at" + r + " " + c);
               if( 0 <= r && r < R && 0 <= c && c < C ){
                   if(!marked[r][c] && grid[r][c] != 0){
                q.add(new ArrayList(Arrays.asList(r,c,depth+1)));
               marked[r][c] = true;
                   }
           }
           }
            
         
       }
         
         return -1;
	}
                            

	public static void main(String[] args) {
	 Solution s = new Solution();
	 int[][] grid = {{1, 1, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 0}};

	 int result = s.shortestCellPath(grid,0,0,2,2);
	 System.out.println(result);
	}
}
