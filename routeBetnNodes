import java.util.*;

public class Graph{
    
  List<List<Integer>> adj = new ArrayList<>();
  private final int v;
  public Graph(int v){
      this.v  = v;
     for (int i = 0; i <= v; i++) {
            adj.add(i, new ArrayList<>());
        }
}

public void addEdge(int v, int w){
    adj.get(v).add(w);
    adj.get(w).add(v);
}

public Iterable<Integer> adj(int v){
    return adj.get(v);
}

public int vertices(){
    return v;
}

public boolean Search(Graph g, int u, int v){
    
     boolean[] marked;
     if( u == v){
        return true;
    }
    
    int n = g.vertices();
    marked = new boolean[n+1];
    
    LinkedList<Integer> q = new LinkedList<Integer>();
   
    
   
    q.add(u);
    marked[u] = true;
    while(!q.isEmpty()){
        int r = q.removeFirst();
       
        
        
         for(int w : g.adj(r)){
                if(!marked[w]){
                    if( w == v){
                        return true;
                    }else{
                    q.add(w);
                    marked[w] = true;
                    }
                }
            }
    
        
    }
    return false;
}

public static void main(String args[]){
    Graph g = new Graph(6);
    
    g.addEdge(1,2);
    g.addEdge(1,5);
    g.addEdge(1,6);
    g.addEdge(2,5);
    g.addEdge(2,4);
    g.addEdge(3,2);
    g.addEdge(4,3);
    g.addEdge(4,5);
    boolean found  = g.Search(g,1,7);
    System.out.println(found);
    
}

}




    
