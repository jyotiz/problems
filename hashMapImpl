class MyHashMap {

    private int keyRange;
    private List<Bucket> hashTab;
    /** Initialize your data structure here. */
    public MyHashMap() {
        this.keyRange = 2069;
        this.hashTab  = new ArrayList<Bucket>();;
        for(int i = 0; i<keyRange; ++i){
            this.hashTab.add( new Bucket());
        }
    }
    
    protected int hashFunc(int key){
        return ( key % this.keyRange);
    }
    /** value will always be non-negative. */
    public void put(int key, int value) {
        int index = this.hashFunc(key);
        this.hashTab.get(index).update(key, value);
        
    }
    
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    public int get(int key) {
        int index = this.hashFunc(key);
        return this.hashTab.get(index).get(key); 
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    public void remove(int key) {
         int index = this.hashFunc(key);
        this.hashTab.get(index).remove(key);
    }
}

class Bucket {
    
    private List<Pair<Integer,Integer>> bucket;
    
    public Bucket(){
        this.bucket = new LinkedList<Pair<Integer, Integer>>();
    }
    
    public Integer get(Integer key){
        for(Pair<Integer,Integer> pair : this.bucket){
            if(pair.first.equals(key))
                return pair.second;
        }
        return -1;
    }
    
    public void update(Integer key, Integer val){
        boolean found = false;
        
        for(Pair<Integer, Integer> pair : this.bucket){
            if(pair.first.equals(key)){
                pair.second = val;
                found  = true;
            }
        }
        
        if(!found){
            this.bucket.add(new Pair<Integer,Integer>(key,val));
        }
    }
    
    public void remove(Integer key){
        for (Pair<Integer, Integer> pair : this.bucket) {
      if (pair.first.equals(key)) {
        this.bucket.remove(pair);
        break;
      }
    }
    }
}

class Pair<U,V>{
    public U first;
    public V second;
    
    public Pair(U first, V second){
        this.first = first;
        this.second = second;
    }
}
/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */
