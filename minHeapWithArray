import java.util.*;
public class MinHeap{
 
 private int[] heap;
 private int root;
 private int size;
 private int maxSize;
 private static final int FRONT = 1;
 
 public MinHeap(int maxSizeInput){
     this.size = 0;
     this.maxSize = maxSizeInput;
     heap = new int[this.maxSize + 1];
     heap[0] = Integer.MIN_VALUE;
 } 
 
 public int parent(int n){
   
     return (n/2);
 }
 
 public int leftChild(int n){
     return (2*n);
 }
 
 public int rightChild(int n){
     return (2*n + 1);
 }
 
 public void swap(int x, int y){
     int tmp = heap[x];
     heap[x] = heap[y];
     heap[y] = tmp;      
 }
 
 public void insert(int n){
    
     if(size >= maxSize){
         return;
     }
     
     heap[++size] = n;
     int current = size;
     while(heap[current] < heap[parent(current)]){
         swap(current, parent(current));
         current = parent(current);
         
     }
 }
 
 public boolean isLeaf(int pos){
     
    if (pos >= (size / 2) && pos <= size) {
            return true;
        }
        return false;
 }
 
 public void sink(int pos){
     // If the node is a non-leaf node and greater
        // than any of its child
        if (!isLeaf(pos)) {
            if (heap[pos] > heap[leftChild(pos)]
                || heap[pos] > heap[rightChild(pos)]) {
 
                // Swap with the left child and heapify
                // the left child
                if (heap[leftChild(pos)] < heap[rightChild(pos)]) {
                    swap(pos, leftChild(pos));
                    sink(leftChild(pos));
                }
 
                // Swap with the right child and heapify
                // the right child
                else {
                    swap(pos, rightChild(pos));
                    sink(rightChild(pos));
                }
            }
        }
 }
 
 public int extractMin(){
     int minElement = heap[FRONT];
     heap[FRONT] = heap[size--];
     sink(FRONT);
     return minElement;
 }
 
 public void print(){
     for(int i=1;i<=size/2;i++){
         System.out.println("Parent.. " + heap[i] + "left child... " + heap[2*i] + "right child... " + heap[2*i + 1]);
         System.out.println(" ");
     }
 }

    public static void main(String []args){
    MinHeap minHeap = new MinHeap(15);
        minHeap.insert(5);
        minHeap.insert(3);
        minHeap.insert(17);
        minHeap.insert(10);
        minHeap.insert(84);
        minHeap.insert(19);
        minHeap.insert(6);
        minHeap.insert(22);
        minHeap.insert(9);
 
        minHeap.print(); 
      int min = minHeap.extractMin();
      System.out.println("The Min val is " + min);
      
    
  
     }
}
